function output = adaptiveMedianFilter(input, max_window_size)
% Adaptive Median Filter for grayscale images

    input = double(input);
    [rows, cols] = size(input);
    output = input;

    for i = 1:rows
        for j = 1:cols
            window_size = 3;
            done = false;

            while ~done
                rmin = max(i - floor(window_size/2), 1);
                rmax = min(i + floor(window_size/2), rows);
                cmin = max(j - floor(window_size/2), 1);
                cmax = min(j + floor(window_size/2), cols);

                window = input(rmin:rmax, cmin:cmax);
                Zmin = min(window(:));
                Zmax = max(window(:));
                Zmed = median(window(:));
                Zxy = input(i, j);

                A1 = Zmed - Zmin;
                A2 = Zmed - Zmax;

                if A1 > 0 && A2 < 0
                    B1 = Zxy - Zmin;
                    B2 = Zxy - Zmax;
                    if B1 > 0 && B2 < 0
                        output(i,j) = Zxy;
                    else
                        output(i,j) = Zmed;
                    end
                    done = true;
                else
                    window_size = window_size + 2;
                    if window_size > max_window_size
                        output(i,j) = Zmed;
                        done = true;
                    end
                end
            end
        end
    end

    output = uint8(output);
end
